buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.aliyun.com/repository/central' }
        maven { url = 'https://maven.aliyun.com/repository/public' }
        maven { url = 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url = 'https://maven.aliyun.com/repository/apache-snapshots' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.blamejared.com' }
    }

    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

version = ''
group = mod_group_id

base {
    archivesName = "BxP2-"+new Date().format("yyyy-MM-dd-HHmm")
}


mixin {
    add sourceSets.main, "bxp.refmap.json"
    config "bxp.mixins.json"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true
    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                bxp2 {
                    source sourceSets.main
                }
            }
        }

        client {
            //arg "-mixin.config=bxp.mixins.json"
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
    }
    maven { url 'https://modmaven.dev/' }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:tinkers-construct-74072:6266282")
    implementation fg.deobf("curse.maven:mantle-74924:6258424")
    implementation fg.deobf("curse.maven:draconic-evolution-223565:6065044")
    implementation fg.deobf("curse.maven:brandons-core-231382:5422013")
    implementation fg.deobf("curse.maven:cofh-core-69162:5374122")
    implementation fg.deobf("curse.maven:vampirism-become-a-vampire-233029:6289561")
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:5753868")
    implementation fg.deobf("curse.maven:crafttweaker-239197:6256146")
    implementation fg.deobf("curse.maven:game-phase-975444:5115068")
    implementation fg.deobf("curse.maven:kubejs-238086:5853326")
    implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:6237015")
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:multiblocked2-1104057:6381388")
    implementation fg.deobf("curse.maven:jei-238222:6075247")
    implementation fg.deobf("curse.maven:blood-magic-224791:5290993")
    implementation fg.deobf("curse.maven:mekanism-extras-1026040:6424885")
    implementation fg.deobf("curse.maven:time-in-a-bottle-universal-895919:4744787")
    implementation fg.deobf("curse.maven:ad-astra-635042:6262032")
    implementation fg.deobf("curse.maven:rhino-416294:6186971")
    implementation fg.deobf("mekanism:Mekanism:1.20.1-10.4.15.75:generators")
    implementation fg.deobf("mekanism:Mekanism:1.20.1-10.4.15.75")
    implementation fg.deobf("curse.maven:ldlib-626676:6337779")
    implementation fg.deobf("curse.maven:modern-ui-352491:6199942")
    implementation fg.deobf("curse.maven:botania-225643:6366547")
    implementation fg.deobf("curse.maven:projecte-226410:4901949")
    implementation fg.deobf("curse.maven:curios-309927:6238756")
    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
    implementation fg.deobf("curse.maven:hostile-neural-networks-552574:5895036")
    implementation fg.deobf("curse.maven:powah-rearchitected-633483:6390490")
    implementation fg.deobf("curse.maven:aether-255308:6134920")
    implementation fg.deobf("curse.maven:mystical-agradditions-256247:6503436")
    implementation fg.deobf("curse.maven:placebo-283644:6274231")
    implementation fg.deobf("curse.maven:cloth-config-348521:5729105")
    implementation fg.deobf("curse.maven:mystical-agriculture-246640:6373292")
    implementation fg.deobf("curse.maven:cucumber-272335:5857370")
    implementation fg.deobf("curse.maven:jerotesvillage-1004844:6370602")
    implementation fg.deobf("curse.maven:citadel-331936:6002521")
    implementation fg.deobf("curse.maven:botany-pots-353928:6348581")
    implementation fg.deobf("curse.maven:bookshelf-228525:5423987")
    implementation fg.deobf("curse.maven:productivebees-377897:5566102")
    implementation fg.deobf("curse.maven:construction-wand-399558:4684054")
    implementation fg.deobf("curse.maven:etst-lib-1206379:6549496")
    implementation fg.deobf("curse.maven:ars-nouveau-401955:5894609")
    implementation fg.deobf("curse.maven:ftb-teams-forge-404468:6130786")
    implementation fg.deobf("curse.maven:thermal-expansion-69163:5372749")
    implementation fg.deobf("curse.maven:thermal-foundation-222880:5443583")
    implementation fg.deobf("curse.maven:rats-323596:5904296")
    implementation fg.deobf("curse.maven:industrial-foregoing-266515:5474059")
    implementation fg.deobf("curse.maven:titanium-287342:5468426")

    implementation fileTree(dir: 'lib', includes: ['*.jar'])

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs += '-Xlint:-removal'
}
